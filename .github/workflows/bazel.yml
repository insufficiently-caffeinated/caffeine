name: bazel

on:
  # Don't build CI for stackbot internal branches, they are already built for PRs
  push:
    branches-ignore:
      - stackbot/**
  pull_request:

env:
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  CACHE_CREDENTIALS: ${{ secrets.CACHE_CREDENTIALS }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mode: [opt, fastbuild]
        compiler: [gcc, clang]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Find bazel output base
        id: bazel_info
        shell: bash
        run: |
          echo "::set-output name=output_base::$(bazel info output_base)"

      - uses: actions/cache@v2
        with:
          path: |
            ${{ steps.bazel_info.outputs.output_base }}/external
          key: bazel-external-${{ hashFiles('WORKSPACE', 'MODULE.bazel', 'third_party/*/*') }}

      - name: Configure bazel flags
        shell: bash
        run: |
          cat >> local.bazelrc <<- EOF
          build --compilation_mode=${{ matrix.mode }}
          build --config=${{ matrix.compiler }}
          EOF

      # - name: Avoid uploading if we don't have credentials
      #   if: env.CACHE_CREDENTIALS == null
      #   shell: bash
      #   run: |
      #     echo build --remote_cache=grpc://bazel-cache.airmash.cc:9092/ >> local.bazelrc
      #     echo build --remote_upload_local_results=false       >> local.bazelrc

      # - name: Pass credentials
      #   if: env.CACHE_CREDENTIALS != null
      #   shell: bash
      #   run: |
      #     echo "build '--remote_cache=grpc://bazel:${{ env.CACHE_CREDENTIALS }}@bazel-cache.airmash.cc:9092/'" >> local.bazelrc

      - name: Find all external dependencies
        shell: bash
        run: |
          # Get a list of all external dependencies
          bazel query 'deps(//...)' | grep -ve '^//.*$' > bazel-deps

      - name: Restore bazel disk cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/bazel-disk-cache
          key: bazel-build-disk-cache--${{ matrix.mode }}-${{ matrix.compiler}}-${{ hashFiles('bazel-deps') }}

      - name: Run all tests
        run: |
          bazelisk test --config=ci -- //... //:tarball-dev \
            $(bazelisk query 'kind(".*_test", //...) intersect attr("tags", "manual", //...)') \
            -//:format

      # This is needed to work around a bug in actions/upload-artifact.
      # Specficially, it fails if the directory that contains the artifact
      # is actually a symlink to a directory (as happens with bazel-bin).
      - name: Move tarball to a different directory
        run: |
          mv bazel-bin/caffeine-${{ matrix.mode }}.tar.gz caffeine-dev.tar.gz

      - name: Upload release tarball
        uses: actions/upload-artifact@v2
        with:
          name: caffeine-${{ matrix.compiler }}-${{ matrix.mode }}
          path: caffeine.tar.gz

  format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mode: [fastbuild]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Find bazel output base
        id: bazel_info
        shell: bash
        run: |
          echo "::set-output name=output_base::$(bazel info output_base)"

      - name: Configure bazel flags
        shell: bash
        run: |
          cat >> local.bazelrc <<- EOF
          build --compilation_mode=${{ matrix.mode }}
          EOF

      # - name: Avoid uploading if we don't have credentials
      #   if: env.CACHE_CREDENTIALS == null
      #   shell: bash
      #   run: |
      #     echo build --remote_cache=grpc://bazel-cache.airmash.cc:9092/ >> local.bazelrc
      #     echo build --remote_upload_local_results=false       >> local.bazelrc

      # - name: Pass credentials
      #   if: env.CACHE_CREDENTIALS != null
      #   shell: bash
      #   run: |
      #     echo "build '--remote_cache=grpc://bazel:${{ env.CACHE_CREDENTIALS }}@bazel-cache.airmash.cc:9092/'" >> local.bazelrc
      
      - name: Find all external dependencies
        shell: bash
        run: |
          # Get a list of all external dependencies
          bazel query 'deps(//:check-format)' | grep -ve '^//.*$' > bazel-deps

      - name: Restore bazel disk cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/bazel-disk-cache
          key: bazel-fmt-disk-cache--${{ matrix.mode }}-${{ matrix.compiler}}-${{ hashFiles('bazel-deps') }}

      - name: Check formatting of all targets
        run: bazelisk run --config=ci -- //:check-format

  all-test-pass:
    name: Verify all tests pass
    needs: [build, format]
    runs-on: ubuntu-latest

    steps:
      - name: No-op
        run: |
          echo "All checks passed!"

